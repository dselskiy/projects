<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cascade Putting Course</title>
    <style>
        body {
            font-family: "Berlingske", serif;
            background-color: rgb(0, 162, 216); /* Set background color to light blue */
            color: white; /* Set text color to white */
        }
        h1 {
            text-align: center; /* Center align the title */
            font-size: 3em; /* Increase font size of the title */
            display: none; /* Initially hide the h1 header */
        }
        #start-message {
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            height: 100vh; /* Set the height of the container to full viewport height */
        }
        #start-message p {
            font-size: 1.7em; /* Increase font size */
            margin-bottom: 10px; /* Add some margin below the paragraph */
        }
        #start-message button {
            font-size: 2em; /* Increase font size of the button */
            margin-top: 50px;
        }
        #slider-container {
            text-align: center; /* Center align the slider container */
            font-size: 1.5em;
        }
        #scorecard-container {
            display: none; /* Initially hide the scorecard */
        }
        table {
            border-collapse: collapse;
            width: 100%;
        }
        th, td {
            border: 1px solid #dddddd;
            text-align: center;
            padding: 8px;
        }
        th {
            background-color: #064b9a;
            font-size: 1.5em;
        }
        .player-label {
            cursor: pointer;
            background-color: #064b9a; /* Dark grey background color */
            color: white; /* White text color */
            font-size: 1.5em;
        }
        /* Slimmer hole number column */
        th:first-child, td:first-child {
            width: 20px;
            min-width: 20px;
        }
        .score-cell {
            position: relative;
        }
        .score-input {
            width: 30px;
            text-align: center;
            color: white;
            background-color: transparent;
            border: none;
        }
        .minus-btn, .plus-btn {
            position: relative;
            top: 50%;
            cursor: pointer;
        }
        .minus-btn {
            left: 0;
        }
        .plus-btn {
            right: 0;
        }
    </style>
</head>
<body>
    
    <h1>Cascade Putting Course</h1>
    
    <div id="start-message">

        <p>add cascade logo clipart here</p>

        <p>⛳ For your safety: stay off rocks, gardens and waterways</p>
        <p>⛳ Please ensure a 6 putt maximum to keep play under 1.5 hours</p>
        <p>⛳ Lost a ball? Ask us for a new one!</p>
        <button onclick="startApp()">Start</button>
    </div>

    <div id="scorecard-container">
        <div id="slider-container">
            <label for="player-slider">Number of Players:</label>
            <input type="range" id="player-slider" min="1" max="6" value="2" onchange="updatePlayerCount()">
            <span id="player-count-label">2</span>
        </div>

        <table id="scorecard">
            <thead>
                <tr>
                    <th>Hole</th>
                    <th id="player1-label" class="player-label" contenteditable="true">Player 1</th>
                    <th id="player2-label" class="player-label" contenteditable="true">Player 2</th>
                    <th id="player3-label" class="player-label" contenteditable="true">Player 3</th>
                    <th id="player4-label" class="player-label" contenteditable="true">Player 4</th>
                    <th id="player5-label" class="player-label" contenteditable="true">Player 5</th>
                    <th id="player6-label" class="player-label" contenteditable="true">Player 6</th>
                </tr>
            </thead>
            <tbody id="scorecard-body">
                <!-- Table rows will be dynamically generated here -->
            </tbody>
            <tfoot id="scorecard-footer">
                <!-- Table footer for totals will be dynamically generated here -->
            </tfoot>
        </table>
    </div>

    <script>
        function startApp() {
            // Hide the start message and show the scorecard container
            document.getElementById('start-message').style.display = 'none';
            document.getElementById('scorecard-container').style.display = 'block';
            // Display the h1 header
            document.querySelector('h1').style.display = 'block';
        }

        // Function to update the player count label and scorecard based on the number of players selected
        function updatePlayerCount() {
            const numPlayers = document.getElementById('player-slider').value;
            document.getElementById('player-count-label').textContent = numPlayers;

            // Update player labels
            for (let i = 1; i <= 6; i++) {
                const playerLabel = document.getElementById('player' + i + '-label');
                if (i <= numPlayers) {
                    playerLabel.style.display = 'table-cell';
                } else {
                    playerLabel.style.display = 'none';
                }
            }

            // Update scorecard
            updateScorecard(numPlayers);
        }

        // Function to update the scorecard based on the number of players selected
        function updateScorecard(numPlayers) {
            const scorecardBody = document.getElementById('scorecard-body');
            scorecardBody.innerHTML = '';

            const numHoles = 18;

            for (let hole = 1; hole <= numHoles; hole++) {
                const row = document.createElement('tr');
                const holeCell = document.createElement('td');
                holeCell.textContent = hole;
                row.appendChild(holeCell);

                for (let player = 1; player <= numPlayers; player++) {
                    const scoreCell = document.createElement('td');
                    scoreCell.classList.add('score-cell');
                    const minusBtn = document.createElement('button');
                    minusBtn.textContent = '-';
                    minusBtn.classList.add('minus-btn');
                    minusBtn.addEventListener('click', () => decreaseScore(scoreInput));
                    const scoreInput = document.createElement('input');
                    scoreInput.type = 'text';
                    scoreInput.value = '0';
                    scoreInput.classList.add('score-input');
                    const plusBtn = document.createElement('button');
                    plusBtn.textContent = '+';
                    plusBtn.classList.add('plus-btn');
                    plusBtn.addEventListener('click', () => increaseScore(scoreInput));
                    scoreCell.appendChild(minusBtn);
                    scoreCell.appendChild(scoreInput);
                    scoreCell.appendChild(plusBtn);
                    row.appendChild(scoreCell);
                }

                scorecardBody.appendChild(row);
            }

            // Update scorecard footer for totals
            updateScorecardFooter(numPlayers);
        }

        // Function to update the scorecard footer for totals
        function updateScorecardFooter(numPlayers) {
            const scorecardFooter = document.getElementById('scorecard-footer');
            scorecardFooter.innerHTML = '';

            const numHoles = 18;

            const footerRow = document.createElement('tr');
            const totalLabelCell = document.createElement('td');
            totalLabelCell.textContent = 'Total';
            footerRow.appendChild(totalLabelCell);

            for (let player = 1; player <= numPlayers; player++) {
                const totalCell = document.createElement('td');
                totalCell.textContent = '-';
                footerRow.appendChild(totalCell);
            }

            scorecardFooter.appendChild(footerRow);
        }

        // Function to increase the score
        function increaseScore(scoreInput) {
            let score = parseInt(scoreInput.value);
            if (score < 6) { // Check if the score is less than 6
                scoreInput.value = score + 1;
                updateTotals();
            }
        }

        // Function to decrease the score
        function decreaseScore(scoreInput) {
            let score = parseInt(scoreInput.value);
            if (score > 0) {
                scoreInput.value = score - 1;
                updateTotals();
            }
        }

        // Function to update totals live
        function updateTotals() {
            const numPlayers = document.getElementById('player-slider').value;
            const numHoles = 18;
            const scorecardBody = document.getElementById('scorecard-body');
            const scorecardFooter = document.getElementById('scorecard-footer');

            for (let player = 1; player <= numPlayers; player++) {
                let total = 0;
                for (let hole = 1; hole <= numHoles; hole++) {
                    const scoreInput = scorecardBody.rows[hole - 1].cells[player].querySelector('input[type=text]');
                    total += parseInt(scoreInput.value);
                }
                const totalCell = scorecardFooter.rows[0].cells[player];
                totalCell.textContent = total;
            }
        }

        // Initial call to update the scorecard with default number of players
        updatePlayerCount();
    </script>
</body>
</html>
